name: Docker Build & Push

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      push_to_hub:
        description: 'Push to Docker Hub'
        required: false
        default: true
        type: boolean

env:
  DOCKER_IMAGE: leiax00/queqiao-arr
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        
      - name: 提取 Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            # 版本标签
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # latest 标签（仅非预发布版本）
            type=raw,value=latest,enable={{is_default_branch}}
            # commit SHA 短标签
            type=sha,prefix=sha-,format=short
          flavor: |
            latest=false
      
      - name: 设置 QEMU（多平台支持）
        uses: docker/setup-qemu-action@v3
        
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # 使用 docker-container 驱动以支持高级特性
          driver-opts: image=moby/buildkit:latest
          
      - name: 登录 Docker Hub
        if: github.event_name != 'workflow_dispatch' || inputs.push_to_hub == true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 构建并推送 Docker 镜像
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'workflow_dispatch' || inputs.push_to_hub == true }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            
      - name: 镜像信息输出
        run: |
          echo "### 🐳 Docker 镜像构建成功！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**镜像标签:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**支持平台:** ${{ env.PLATFORMS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**镜像摘要:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          
  security-scan:
    name: Security Scan
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.push_to_hub == true
    
    steps:
      - name: 提取镜像标签
        id: extract-tag
        run: |
          # 提取版本标签（第一个标签）
          TAGS="${{ needs.docker.outputs.tags }}"
          FIRST_TAG=$(echo "$TAGS" | head -n 1)
          echo "Scanning image: $FIRST_TAG"
          echo "image_tag=$FIRST_TAG" >> $GITHUB_OUTPUT
      
      - name: 拉取 Docker 镜像
        run: |
          docker pull ${{ steps.extract-tag.outputs.image_tag }}
          
      - name: 运行 Trivy 安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.extract-tag.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: 上传 Trivy 扫描结果到 GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 生成安全扫描报告
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.extract-tag.outputs.image_tag }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

